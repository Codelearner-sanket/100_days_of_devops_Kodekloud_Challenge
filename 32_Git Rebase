*****************************Day 32: Git Rebase***********************************************
The Nautilus application development team has been working on a project repository /opt/games.git. This repo is cloned at /usr/src/kodekloudrepos on storage server in Stratos DC. They recently shared the following requirements with DevOps team:

One of the developers is working on feature branch and their work is still in progress, however there are some changes which have been pushed into the master branch, the developer now wants to rebase the feature branch with the master branch without loosing any data from the feature branch, also they don't want to add any merge commit by simply merging the master branch into the feature branch. Accomplish this task as per requirements mentioned.

Also remember to push your changes once done.

Solution :

🚀 Rebase Feature Branch onto Master in Git (Linear History)

Login to storage server with root user 

1️⃣ Navigate to the repository
cd /usr/src/kodekloudrepos/games

2️⃣ Verify current branch
git branch

Output:
* feature
  master

✅ We are on the feature branch.


3️⃣ Rebase feature branch onto master
git rebase master

This reapplies all commits from feature on top of the latest master commits.
No merge commit is created → history remains linear.

⚠ If conflicts occur, resolve them manually, then continue:

git add <file>
git rebase --continue


4️⃣ Push rebased feature branch to remote
git push origin feature --force-with-lease

--force-with-lease safely overwrites the remote branch to match the rebased local branch.

5️⃣ Verify commit history
git log --oneline --graph --all

Example output:
* 493794e (HEAD -> feature, origin/feature) Add new feature
* 773a385 (origin/master, master) Update info.txt
* fff0c9d initial commit


📌 Explanation
git rebase master → moves the feature branch commits on top of master commits.
Linear history → no extra merge commit is added.
--force-with-lease → ensures safe update of the remote branch after rebasing.
This workflow is preferred when you want a clean, readable history.

🔥 Key Takeaway:
Using git rebase for integrating master changes into a feature branch avoids unnecessary merge commits and keeps the commit history tidy, making it easier for teams to track changes and review code.