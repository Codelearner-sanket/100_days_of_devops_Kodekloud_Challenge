*****************************Day 30: Git hard reset***********************************************

The Nautilus application development team was working on a git repository /usr/src/kodekloudrepos/official present on Storage server in Stratos DC. This was just a test repository and one of the developers just pushed a couple of changes for testing, but now they want to clean this repository along with the commit history/work tree, so they want to point back the HEAD and the branch itself to a commit with message add data.txt file. Find below more details:

In /usr/src/kodekloudrepos/official git repository, reset the git commit history so that there are only two commits in the commit history i.e initial commit and add data.txt file.

Also make sure to push your changes.

Solution :

üöÄ Git Reset & Clean History: Keeping Only Specific Commits

In real-world projects, sometimes developers create temporary test commits in a repository. Later, when the testing phase is over, the team may want to clean up the Git history and keep only the important commits.

Recently, the Nautilus application development team faced exactly this situation in their repository /usr/src/kodekloudrepos/official. Multiple test commits (Test Commit1 through Test Commit10) were added, but the developers wanted to reset the repository so that it contained only two commits:

initial commit
add data.txt file

Login to storage server and root 

1. Go to the Repository
cd /usr/src/kodekloudrepos/official

2. Check Commit History
git log --oneline
4480f06 Test Commit10
d43c553 Test Commit9
c5e6cc5 Test Commit8
...
002eb16 add data.txt file
2f6ccbb initial commit


3. Reset Branch to Specific Commit
We want to keep history up to the commit add data.txt file.

git reset --hard 002eb16


Force Push to Remote
To ensure the remote repository matches the cleaned history:

git push origin master --force

5. Verify Clean History
git log --oneline


Final output:
002eb16 add data.txt file
2f6ccbb initial commit



üìå Meaning of the Task

git reset --hard <commit> ‚Üí moves the HEAD and branch pointer back to the chosen commit, deleting later commits.
git push --force ‚Üí updates the remote repository to match the cleaned local history.
This ensures that only meaningful commits remain in the repo.

üëè This approach is useful when you need to rewrite history to remove unwanted commits, keeping the repository neat and production-ready.