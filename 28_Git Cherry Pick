*****************************Day 28: Git Cherry Pick***********************************************

The Nautilus application development team has been working on a project repository /opt/ecommerce.git. This repo is cloned at /usr/src/kodekloudrepos on storage server in Stratos DC. They recently shared the following requirements with the DevOps team:

There are two branches in this repository, master and feature. One of the developers is working on the feature branch and their work is still in progress, however they want to merge one of the commits from the feature branch to the master branch, the message for the commit that needs to be merged into master is Update info.txt. Accomplish this task for them, also remember to push your changes eventually.


Solution : 
ðŸš€ Git Task: Cherry-Pick a Commit from Feature to Master
The Nautilus team wanted to merge only a specific commit (Update info.txt) from the feature branch into the master branch of /opt/ecommerce.git. This is a classic case for git cherry-pick, which lets you apply a single commit from one branch onto another without merging the whole branch.

# Go to the repo
cd /usr/src/kodekloudrepos/ecommerce

# Check branches
git branch

# Switch to feature and find the commit hash
git checkout feature
git log --oneline
# note the hash of "Update info.txt", here it is 17225f2

# Switch to master branch
git checkout master

# Cherry-pick the commit into master
git cherry-pick 17225f2

# Push the updated master branch to remote
git push origin master

# Verify the commit is in master
git log --oneline



ðŸ“Œ Meaning of the Task

git cherry-pick = copy a single commit from one branch to another.

Unlike git merge, it doesnâ€™t bring all commits from the branch, only the one you specify.

Here, we cherry-picked only the commit Update info.txt from feature â†’ master.

The master branch now contains:

<new_hash> Update info.txt
de3d3f6 Add welcome.txt
90bdfe4 initial commit


Thus, only the required change was merged, leaving the rest of feature untouched.
